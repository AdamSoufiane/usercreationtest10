package com.example.usercreation.application.ports.in;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;

/**
 * Data model representing the incoming user registration data. It serves as a data transfer object to carry the necessary information from the primary adapter to the application service.
 */
@Getter
@EqualsAndHashCode
@ToString
public class UserRegistrationRequest {

    @NotEmpty(message = "Name cannot be empty")
    private String name;

    @NotEmpty(message = "Email cannot be empty")
    @Email(message = "Email should be valid", regexp = ".+@.+\\..+")
    private String email;

    @NotEmpty(message = "Password cannot be empty")
    @Size(min = 8, message = "Password must be at least 8 characters long")
    private String password;

    @NotNull(message = "Created date cannot be null")
    private final LocalDateTime createdDate;

    @NotNull(message = "Last modified date cannot be null")
    private final LocalDateTime lastModifiedDate;

    @NotNull(message = "Version cannot be null")
    private Long version;

    public UserRegistrationRequest() {
        this.createdDate = LocalDateTime.now();
        this.lastModifiedDate = LocalDateTime.now();
        this.version = 0L;
    }

    public UserRegistrationRequest(String name, String email, String password) {
        this();
        this.name = name;
        this.email = email;
        this.password = password;
    }

    public UserRegistrationRequest(UserRegistrationRequest original) {
        this.name = original.name;
        this.email = original.email;
        this.password = original.password;
        this.createdDate = original.createdDate;
        this.lastModifiedDate = original.lastModifiedDate;
        this.version = original.version;
    }

    public void updateLastModifiedDate() {
        this.lastModifiedDate = LocalDateTime.now();
    }

    // The rest of the getters are generated by Lombok
    // Setters for createdDate and lastModifiedDate are not provided to maintain the integrity of the timestamp fields
}